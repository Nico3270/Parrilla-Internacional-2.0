generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Section {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Type {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               Role                 @default(user)
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  emailVerified      DateTime?
  orders             Order[]
  OrderStatusHistory OrderStatusHistory[]
}

model Product {
  id                   String                @id @default(uuid())
  titulo               String
  description          String
  shortDescription     String?
  available            Boolean
  precio               Float                 @default(0)
  discountPrice        Float?                @default(0)
  slug                 String                @unique
  tags                 String[]              @default([])
  priority             Int?
  featured             Boolean?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  isAvailableDuring    Json?
  sectionId            String
  typeId               String
  customizationOptions CustomizationOptions?
  orderItems           OrderItem[]
  section              Section               @relation(fields: [sectionId], references: [id])
  type                 Type                  @relation(fields: [typeId], references: [id])
  productImages        ProductImage[]
  reviews              Review[]
  Product_A            Product[]             @relation("RelatedProducts")
  Product_B            Product[]             @relation("RelatedProducts")

  @@index([sectionId])
  @@index([typeId])
  @@index([sectionId, typeId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  username  String
  comment   String
  rating    Int
  date      DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Extra {
  id      String                       @id @default(uuid())
  name    String                       @unique
  price   Float
  options CustomizationOptionsExtras[]
}

model CustomizationOptions {
  id        String                       @id @default(uuid())
  productId String                       @unique
  choices   Choice[]
  product   Product                      @relation(fields: [productId], references: [id])
  extras    CustomizationOptionsExtras[]
}

model CustomizationOptionsExtras {
  customizationOptionsId String
  extraId                String
  customizationOptions   CustomizationOptions @relation(fields: [customizationOptionsId], references: [id], onDelete: Cascade)
  extra                  Extra                @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@id([customizationOptionsId, extraId])
}

model Choice {
  id        String               @id @default(uuid())
  name      String
  values    String[]
  optionsId String
  options   CustomizationOptions @relation(fields: [optionsId], references: [id])
}

model Address {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  department  String
  phone       String
  description String?
  orders      Order[]  @relation("AddressToOrders")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String               @id @default(uuid())
  user          User                 @relation(fields: [userId], references: [id])
  userId        String
  orderItems    OrderItem[]
  address       Address?             @relation(fields: [addressId], references: [id], name: "AddressToOrders", onDelete: SetNull)
  addressId     String?
  mesa          String?
  status        OrderStatus          @default(CREADA)
  preference    OrderPreference
  totalPrice    Float // Agregar este campo
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  statusHistory OrderStatusHistory[] // Relación inversa para ver el historial de estados
}

model OrderStatusHistory {
  id          String      @id @default(uuid())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String
  status      OrderStatus
  changedAt   DateTime    @default(now())
  changedBy   User?       @relation(fields: [changedById], references: [id])
  changedById String? // Nuevo campo opcional para el usuario que cambió el estado

  @@index([orderId, changedAt])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  extras    Json?
  comentario String?  // Campo opcional para los comentarios
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  admin
  user
  server
  kitchen
  delivery
}

enum OrderStatus {
  CREADA
  EN_PREPARACION
  ENTREGADA
  PAGADA
  NO_PAGADA
  CANCELADA
  DOMICILIO
}

enum OrderPreference {
  RESTAURANT
  DELIVERY
}

enum PreferenceType {
  RESTAURANT
  DELIVERY
}
